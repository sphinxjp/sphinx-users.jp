================================
ドキュメントの翻訳にSphinxを使う
================================

:author: 渋川
:date: 2010/04/18

オープンソースのソフトウェアのドキュメントの翻訳や、ブログなどの翻訳をやったことがあるのであれば、日本語と英語をどのように管理していくのか、というのは、地味に面倒な問題です。 `dokuwiki <http://www.dokuwiki.org/ja:dokuwiki>`_ のように、切り替え機能を内蔵したシステムもありますが、見比べながら訳すのがやりにくかったり、テキストファイルでないので、管理が自由にできないという問題もあります。

Sphinxが使っているreStructuredTextにはコメントアウト機能があるので、気軽に翻訳が行えます。ただし、dokuwikiのように、日本語、英語、中国語、ドイツ語・・・など複数言語を一度に扱うのは難しいです。

基本的なやり方
==============

``..`` で始まる行はコメントになります。次に同じインデントに戻るまでのブロックがまとめてコメントアウトされます。これを使うと次のように書くことができます。 

.. code-block:: rest

   .. Inline markup
      =============

   インラインマークアップ
   ======================

   .. Sphinx uses interpreted text roles to 
      insert semantic markup into documents. 
      They are written as ``:rolename:`content```.

   Sphinxは解釈済みのテキストのロールというものを
   使用して、用語の意味を記述して、リンクを張ったり
   することができます。これを記述する時は 
   ``:ロール名:`内容``` というフォーマットで記述します。

``make html`` してレンダリングすると、日本語だけのドキュメントができあがります。

`Tornadoドキュメントの翻訳 <http://tornado.shibu.jp/>`_ のソースコードを見てもらえれば、このように翻訳をしていることがわかります。以前、大きめのドキュメントの翻訳をやったときは、英語部分を落とすスクリプトを自作して使っていましたが、Sphinxを使えば標準機能でそのまま行けます。コードハイライトなども充実しているので、特にソフトウェアのドキュメントの翻訳で力を発揮し、原文以上の翻訳ドキュメントが得られるかもしれません。


書籍を翻訳するためのTips
========================

現在、Sphinxを使って、とある書籍をまるごと翻訳しています。本1冊分みたいに、量が膨大になっても問題なく作業できます。

pdf2txtや `xdoc2txt <http://www31.ocn.ne.jp/~h_ishida/xdoc2txt.html>`_ などを使ってテキスト化したら、章ごとにファイルに分けて、拡張を ``.rst`` にして翻訳を開始します。

最初にまず、セクションタイトルの構造をきちんとreST化して、そこの翻訳だけでもやっておくと、全体の雰囲気が伝わります。 `Expert Python Programmingの目次の翻訳 <http://dl.dropbox.com/u/284189/epp/index.html>`_ に、それに近い実例があります。その際、未訳のセクションタイトルは ``(, )`` で括っておくと、進捗が分かりやすくなります::

   * 異なるアプローチ

      * ウォーターフォール開発モデル
      * スパイラル開発モデル
      * (漸進型開発モデル)

   * ライフサイクルの定義

      * プランニング
      * (開発)
      * (総合デバッグ)
      * リリース

また、ページ数の表記は残しておくことをお勧めします。書籍と往復しながらチェックしたり、原文のErrataを反映するときなど、ページ数があった方が見つけやすくなります。コメントアウトして入れておきましょう。::

  .. [ 215 ]

原文のバージョンアップに備える
==============================

オープンソースのドキュメントの場合には、原文もバージョンアップしていきます。うまくシステム化できればいいのですが、最低限、迷子にならずに翻訳できる方法を紹介します。

簡易方法
--------

翻訳をしたときのバージョンの原文を保持しておきます。そして、最新に更新して、翻訳を再開するバージョンを決めたら、それぞれのディレクトリの差分を取り、それを見ながら翻訳した箇所を確認していきます。

* 新規ファイルがあれば、新しいバージョンからファイルをコピーして新規翻訳する
* 無くなったファイルがあれば、紛らわしくないように削除する
* 差分を確認しながらちょくちょく修正を加えていく。

なお、翻訳している日本語のファイルもきちんとバージョン管理をするのが望ましいのですが、している場合もそうでない場合も、いちど差分をすべて目を通しておきましょう。一見「削除された」と書いてあっても、ただ単に場所を移動しただけの場合も多々あります。

.. image:: diff.jpg

バージョン管理を利用する
------------------------

上記のバージョンのレベルアップ版です。原文は大抵、ソフトウェアを開発しているリポジトリの中などに入っていることが多いと思います。翻訳をしていたバージョン情報の番号だけ覚えておけば、それと翻訳をしているバージョンの差分なども出すことができます。

実際の操作はそれぞれが使用しているバージョン管理システムによって異なります。